language: python
notifications:
  email:
    on_success: change
    on_failure: change

# gives us a more up-to-date glibc (required by tensorflow)
sudo: required
dist: trusty

env:
  global:
    - MODE="test"
    - PYTHON_VERSION="3.5"
    - NENGO_DL_TEST_PRECISION="32"
    - NENGO_DL_TEST_UNROLL="1"
    - NUMPY_VERSION="numpy"
    - TF_VERSION="tensorflow"
    - NENGO_VERSION="nengo"

  matrix:
    - MODE="pep8"
    - MODE="docs"
    - # default build
    - MODE="coverage"
    - MODE="coverage"
      PYTHON_VERSION="2.7"
      NENGO_VERSION="git+https://github.com/nengo/nengo.git"
    - MODE="examples"
    - NENGO_DL_TEST_PRECISION="64"
    - NENGO_DL_TEST_UNROLL="5"
    - PYTHON_VERSION="2.7"
    - PYTHON_VERSION="3.4"
    - PYTHON_VERSION="3.6"
    - NUMPY_VERSION="numpy==1.11.0"
      TF_VERSION="tensorflow==1.2.0"
      NENGO_VERSION="nengo==2.5.0"
    - NENGO_VERSION="git+https://github.com/nengo/nengo.git"

# setup xvfb so we can test examples with matplotlib
before_script:
  - if [[ "$MODE" == "examples" ]]; then
      export DISPLAY=:99.0;
      sh -e /etc/init.d/xvfb start;
      sleep 3;
    fi

# setup miniconda
before_install:
  - wget http://repo.continuum.io/miniconda/Miniconda-latest-Linux-x86_64.sh -O miniconda.sh
  - bash miniconda.sh -b -p $HOME/miniconda
  - export PATH="$HOME/miniconda/bin:$PATH"
  - conda config --set always_yes yes --set changeps1 no
  - conda update -q conda
  - conda info -a
  - conda create -q -n test python=$PYTHON_VERSION pip $NUMPY_VERSION
  - source activate test

# install python requirements
install:
  - pip install $TF_VERSION
  - pip install $NENGO_VERSION
  - pip install -r requirements-test.txt
  - if [[ "$MODE" == "docs" || "$MODE" == "examples" ]]; then
      pip install -r requirements-docs.txt;
      conda install pandoc;
    fi
  - pip install -e .
  - conda list -e
  - pip freeze

# run the main script
script:
  - if [[ "$MODE" == "pep8" ]]; then
      flake8;
    elif [[ "$MODE" == "docs" ]]; then
      export LATEST_TAG="$(git describe --abbrev=0 --tags)";
<<<<<<< HEAD
      sphinx-versioning build -r $TRAVIS_BRANCH -w $TRAVIS_BRANCH -W $LATEST_TAG docs docs/_build/html;
=======
      sphinx-build -b linkcheck docs docs/_build -W -D nbsphinx_execute=never && sphinx-versioning build -r $TRAVIS_BRANCH -w $TRAVIS_BRANCH -W $LATEST_TAG docs docs/_build/html -- -W;
>>>>>>> master
    elif [[ "$MODE" == "coverage" ]]; then
      coverage run -m py.test --pyargs nengo;
      coverage run -a -m py.test nengo_dl;
      coverage report;
    elif [[ "$MODE" == "examples" ]]; then
      py.test -v --durations 20 --nbval-lax docs/examples;
    else
      py.test -n 2 --pyargs nengo && py.test -n 2 --durations 20 nengo_dl;
    fi

# upload results
after_success:
  - if [[ "$MODE" == "docs" && "$TRAVIS_BRANCH" == "master" ]]; then
      export DATE=$(date '+%Y-%m-%d %T');
      ghp-import -m "Last update at $DATE" -b gh-pages docs/_build/html;
      git config --global user.email "travis@travis-ci.org";
      git config --global user.name "TravisCI";
      git push -fq "https://$GH_TOKEN@github.com/nengo/nengo_dl.git" gh-pages;
    elif [[ "$MODE" == "coverage" ]]; then
      eval "bash <(curl -s https://codecov.io/bash)";
    fi
